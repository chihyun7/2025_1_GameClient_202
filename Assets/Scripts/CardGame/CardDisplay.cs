using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class CardDisplay : MonoBehaviour
{
    public CardData cardData;                   // 카드 데이터
    public int cardIndex;   

    // 3d 카드 요소
    public MeshRenderer cardRender;          // 카드 렌더러
    public TextMeshPro nameText;             //이름 텍스트
    public TextMeshPro costText;             //비용 텍스트
    public TextMeshPro attackText;           //공격력 효과 텍스트
    public TextMeshPro descriptionText;      //설명 텍스트

    //카드상태
    private bool isDragging = false;
    private Vector3 originalPosition; // 드래그 전 원래위치

    // 레이어 마스크
    public LayerMask enemyLayer;            // 적 레이어
    public LayerMask playerLayer;           // 플레이어 레이어
    // Start is called before the first frame update
    void Start()
    {
        // 레이어 마스크 설정
        playerLayer = LayerMask.GetMask("Player");
        enemyLayer = LayerMask.GetMask("Enemy");


        SetupCard(cardData);
    }

    // 카드 데이터 설정
    public void SetupCard(CardData data)
    {

        cardData = data;

        //3d 텍스트 업데이트
        if (nameText != null) nameText.text = data.cardName;
        if (costText != null) costText.text = data.manacost.ToString();
        if (attackText != null) attackText.text = data.effectAmount.ToString();
        if (descriptionText != null) descriptionText.text = data.description;

        //카드 텍스쳐 설정
        if (cardRender != null && data.artwork != null)
        {
            Material cardMaterial = cardRender.material;
            cardMaterial.mainTexture = data.artwork.texture;
        }
    }

    private void OnMouseDown()
    {
        //드레그 시작시 원래 위치 저장
        originalPosition = transform.position;
        isDragging = true;
    }

    private void OnMouseDrag()
    {
        if (isDragging)
        {
            //마우스  위치로 카드 이동
            Vector3 mousePos = Input.mousePosition;
            mousePos.z = Camera.main.WorldToScreenPoint(originalPosition).z;  
            Vector3 worldPos = Camera.main.ScreenToWorldPoint(mousePos);
            transform.position = new Vector3(worldPos.x, worldPos.y, transform.position.z); 
        }
    }

    private void OnMouseUp()
    {
        isDragging = false;

        //레이캐스트로 타겟 감지
        RaycastHit hit;
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);

        // 카드 사용 판저 ㅇ지역 변수
        bool cardUsed = false;

        //적 위에 두롭 했는지 검사
        if(Physics.Raycast(ray, out hit, Mathf.Infinity, enemyLayer))
        {
            // 적에게 공격 효과 적용
            CaracterStats enemyStats = hit.collider.GetComponent<CaracterStats>();

            if (enemyStats != null)
            {
                if(cardData.cardType == CardData.CardType.Attack)
                {
                    //공격 카드면 데미지 주기
                    enemyStats.TakeDamage(cardData.effectAmount);
                    Debug.Log($"{cardData.cardName} 카드로 적에게 {cardData.effectAmount}데미지를 입렸습니다. ");
                    cardUsed = true;
                }
                else
                {
                    Debug.Log("이 카드는 적에게 사용할 수 없습니다.");
                }
            }
        }
        else if(Physics.Raycast(ray,out hit, Mathf.Infinity, playerLayer))
        {
            // 플레이어에게 힐 효과 적용
            CaracterStats playerStats = hit.collider.GetComponent<CaracterStats>();

            if (playerStats != null)
            {
                if (cardData.cardType == CardData.CardType.Heal)
                {
                    // 힐카드면 회복하기
                    playerStats.Heal(cardData.effectAmount);
                    Debug.Log($"{cardData.cardName} 카트로 플레이어의 체력을{cardData.effectAmount}회복했습니다!");
                    cardUsed= true;
                }
                else
                {
                    Debug.Log("이 카드는 플레이어에게 사용할 수 없습니다.");
                }
            }
        }

        //카드를 사용하지 않았다면 원래 위치로 돠돌리기
        if(!cardUsed)
        {
            transform.position = originalPosition;
        }
        else
        {
            Destroy(gameObject);    
        }
    }
}
